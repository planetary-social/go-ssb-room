// Code generated by counterfeiter. DO NOT EDIT.
package mockdb

import (
	"context"
	"sync"

	"github.com/ssbc/go-ssb-room/v2/roomdb"
)

type FakeNoticesService struct {
	GetByIDStub        func(context.Context, int64) (roomdb.Notice, error)
	getByIDMutex       sync.RWMutex
	getByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	getByIDReturns struct {
		result1 roomdb.Notice
		result2 error
	}
	getByIDReturnsOnCall map[int]struct {
		result1 roomdb.Notice
		result2 error
	}
	RemoveIDStub        func(context.Context, int64) error
	removeIDMutex       sync.RWMutex
	removeIDArgsForCall []struct {
		arg1 context.Context
		arg2 int64
	}
	removeIDReturns struct {
		result1 error
	}
	removeIDReturnsOnCall map[int]struct {
		result1 error
	}
	SaveStub        func(context.Context, *roomdb.Notice) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		arg1 context.Context
		arg2 *roomdb.Notice
	}
	saveReturns struct {
		result1 error
	}
	saveReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNoticesService) GetByID(arg1 context.Context, arg2 int64) (roomdb.Notice, error) {
	fake.getByIDMutex.Lock()
	ret, specificReturn := fake.getByIDReturnsOnCall[len(fake.getByIDArgsForCall)]
	fake.getByIDArgsForCall = append(fake.getByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.GetByIDStub
	fakeReturns := fake.getByIDReturns
	fake.recordInvocation("GetByID", []interface{}{arg1, arg2})
	fake.getByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNoticesService) GetByIDCallCount() int {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	return len(fake.getByIDArgsForCall)
}

func (fake *FakeNoticesService) GetByIDCalls(stub func(context.Context, int64) (roomdb.Notice, error)) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = stub
}

func (fake *FakeNoticesService) GetByIDArgsForCall(i int) (context.Context, int64) {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	argsForCall := fake.getByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNoticesService) GetByIDReturns(result1 roomdb.Notice, result2 error) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = nil
	fake.getByIDReturns = struct {
		result1 roomdb.Notice
		result2 error
	}{result1, result2}
}

func (fake *FakeNoticesService) GetByIDReturnsOnCall(i int, result1 roomdb.Notice, result2 error) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = nil
	if fake.getByIDReturnsOnCall == nil {
		fake.getByIDReturnsOnCall = make(map[int]struct {
			result1 roomdb.Notice
			result2 error
		})
	}
	fake.getByIDReturnsOnCall[i] = struct {
		result1 roomdb.Notice
		result2 error
	}{result1, result2}
}

func (fake *FakeNoticesService) RemoveID(arg1 context.Context, arg2 int64) error {
	fake.removeIDMutex.Lock()
	ret, specificReturn := fake.removeIDReturnsOnCall[len(fake.removeIDArgsForCall)]
	fake.removeIDArgsForCall = append(fake.removeIDArgsForCall, struct {
		arg1 context.Context
		arg2 int64
	}{arg1, arg2})
	stub := fake.RemoveIDStub
	fakeReturns := fake.removeIDReturns
	fake.recordInvocation("RemoveID", []interface{}{arg1, arg2})
	fake.removeIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNoticesService) RemoveIDCallCount() int {
	fake.removeIDMutex.RLock()
	defer fake.removeIDMutex.RUnlock()
	return len(fake.removeIDArgsForCall)
}

func (fake *FakeNoticesService) RemoveIDCalls(stub func(context.Context, int64) error) {
	fake.removeIDMutex.Lock()
	defer fake.removeIDMutex.Unlock()
	fake.RemoveIDStub = stub
}

func (fake *FakeNoticesService) RemoveIDArgsForCall(i int) (context.Context, int64) {
	fake.removeIDMutex.RLock()
	defer fake.removeIDMutex.RUnlock()
	argsForCall := fake.removeIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNoticesService) RemoveIDReturns(result1 error) {
	fake.removeIDMutex.Lock()
	defer fake.removeIDMutex.Unlock()
	fake.RemoveIDStub = nil
	fake.removeIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNoticesService) RemoveIDReturnsOnCall(i int, result1 error) {
	fake.removeIDMutex.Lock()
	defer fake.removeIDMutex.Unlock()
	fake.RemoveIDStub = nil
	if fake.removeIDReturnsOnCall == nil {
		fake.removeIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNoticesService) Save(arg1 context.Context, arg2 *roomdb.Notice) error {
	fake.saveMutex.Lock()
	ret, specificReturn := fake.saveReturnsOnCall[len(fake.saveArgsForCall)]
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		arg1 context.Context
		arg2 *roomdb.Notice
	}{arg1, arg2})
	stub := fake.SaveStub
	fakeReturns := fake.saveReturns
	fake.recordInvocation("Save", []interface{}{arg1, arg2})
	fake.saveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeNoticesService) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeNoticesService) SaveCalls(stub func(context.Context, *roomdb.Notice) error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = stub
}

func (fake *FakeNoticesService) SaveArgsForCall(i int) (context.Context, *roomdb.Notice) {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	argsForCall := fake.saveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeNoticesService) SaveReturns(result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNoticesService) SaveReturnsOnCall(i int, result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	if fake.saveReturnsOnCall == nil {
		fake.saveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNoticesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	fake.removeIDMutex.RLock()
	defer fake.removeIDMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNoticesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ roomdb.NoticesService = new(FakeNoticesService)
